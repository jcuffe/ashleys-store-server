/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CheckoutItemInput: { // input type
    productId: number; // Int!
    quantity: number; // Int!
  }
  PaymentIntentInput: { // input type
    items?: NexusGenInputs['CheckoutItemInput'][] | null; // [CheckoutItemInput!]
    paymentIntentId?: string | null; // String
    shippingAddress?: NexusGenInputs['ShippingAddressInput'] | null; // ShippingAddressInput
  }
  ShippingAddressInput: { // input type
    address1: string; // String!
    address2: string; // String!
    city: string; // String!
    name: string; // String!
    state: string; // String!
    zip: string; // String!
  }
  ShippingIntentInput: { // input type
    items: NexusGenInputs['CheckoutItemInput'][]; // [CheckoutItemInput!]!
    shippingAddress: NexusGenInputs['ShippingAddressInput']; // ShippingAddressInput!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Mutation: {};
  PaymentIntent: { // root type
    clientSecret: string; // String!
    paymentIntentId: string; // String!
  }
  Query: {};
  ShippingIntent: { // root type
    id: string; // String!
    rates: Array<NexusGenRootTypes['ShippingRate'] | null>; // [ShippingRate]!
  }
  ShippingRate: { // root type
    id: string; // String!
    rate: string; // String!
    service: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createOrUpdatePaymentIntent: NexusGenRootTypes['PaymentIntent']; // PaymentIntent!
    createShippingIntent: NexusGenRootTypes['ShippingIntent']; // ShippingIntent!
  }
  PaymentIntent: { // field return type
    clientSecret: string; // String!
    paymentIntentId: string; // String!
  }
  Query: { // field return type
    ok: boolean; // Boolean!
  }
  ShippingIntent: { // field return type
    id: string; // String!
    rates: Array<NexusGenRootTypes['ShippingRate'] | null>; // [ShippingRate]!
  }
  ShippingRate: { // field return type
    id: string; // String!
    rate: string; // String!
    service: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    createOrUpdatePaymentIntent: 'PaymentIntent'
    createShippingIntent: 'ShippingIntent'
  }
  PaymentIntent: { // field return type name
    clientSecret: 'String'
    paymentIntentId: 'String'
  }
  Query: { // field return type name
    ok: 'Boolean'
  }
  ShippingIntent: { // field return type name
    id: 'String'
    rates: 'ShippingRate'
  }
  ShippingRate: { // field return type name
    id: 'String'
    rate: 'String'
    service: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createOrUpdatePaymentIntent: { // args
      checkout: NexusGenInputs['PaymentIntentInput']; // PaymentIntentInput!
    }
    createShippingIntent: { // args
      shipping: NexusGenInputs['ShippingIntentInput']; // ShippingIntentInput!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}